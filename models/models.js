const { DataTypes } = require("sequelize");
const sequelize = require("../db");

// Models import
const User = require("./userModel");
const Basket = require("./basketModel");
const BasketDevice = require("./basketDeviceModel");
const Device = require("./deviceModel");
const Type = require("./typeModel");
const Brand = require("./brandModel");
const Rating = require("./ratingModel");
const DeviceInfo = require("./deviceInfoModel");
const TypeBrand = require("./typeBrandModel");
const Comment = require("./commentModel");
const UserInfo = require("./userInfoModel");
const Token = require("./tokenModel");
const Order = require("./orderModel");

// Establish connections

// üìå –û–¥–∏–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Üí –æ–¥–∏–Ω –∫–æ—à–∏–∫
User.hasOne(Basket, { onDelete: "CASCADE" });
Basket.belongsTo(User);

// üìå –û–¥–∏–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Üí –±–∞–≥–∞—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
User.hasMany(Rating, { onDelete: "CASCADE" });
Rating.belongsTo(User);

// üìå –û–¥–∏–Ω –∫–æ—à–∏–∫ ‚Üí –±–∞–≥–∞—Ç–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —á–µ—Ä–µ–∑ BasketDevice
Basket.hasMany(BasketDevice, { onDelete: "CASCADE" });
BasketDevice.belongsTo(Basket);

// üìå –û–¥–∏–Ω –ø—Ä–∏—Å—Ç—Ä—ñ–π ‚Üí –æ–¥–∏–Ω —Ç–∏–ø
Type.hasMany(Device);
Device.belongsTo(Type);

// üìå –û–¥–∏–Ω –±—Ä–µ–Ω–¥ ‚Üí –±–∞–≥–∞—Ç–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
Brand.hasMany(Device);
Device.belongsTo(Brand);

// üìå –ü—Ä–∏—Å—Ç—Ä—ñ–π ‚Üí –±–∞–≥–∞—Ç–æ BasketDevice
Device.hasMany(BasketDevice, { onDelete: "CASCADE" });
BasketDevice.belongsTo(Device);

// üìå –ü—Ä–∏—Å—Ç—Ä—ñ–π –º–∞—î –±–∞–≥–∞—Ç–æ DeviceInfo
Device.hasMany(DeviceInfo, { as: "info" });
DeviceInfo.belongsTo(Device);

// üìå –ú—ñ–∂ Type —Ç–∞ Brand —î –∑–≤'—è–∑–æ–∫ many-to-many
Type.belongsToMany(Brand, { through: TypeBrand });
Brand.belongsToMany(Type, { through: TypeBrand });

// üìå –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ
User.hasMany(Comment);
Comment.belongsTo(User);
Device.hasMany(Comment);
Comment.belongsTo(Device);

// üìå –ö–æ–∂–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –æ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
User.hasOne(UserInfo);
UserInfo.belongsTo(User);

// üìå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –±–∞–≥–∞—Ç–æ —Ç–æ–∫–µ–Ω—ñ–≤
User.hasMany(Token);
Token.belongsTo(User);

// üìå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –±–∞–≥–∞—Ç–æ –∑–∞–º–æ–≤–ª–µ–Ω—å
User.hasMany(Order, { onDelete: "CASCADE" });
Order.belongsTo(User);

// üìå –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∑–≤‚Äô—è–∑–æ–∫ –º—ñ–∂ –∫–æ—à–∏–∫–æ–º —Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º
Basket.belongsTo(Order, { foreignKey: 'orderId', onDelete: "SET NULL" });
Order.hasOne(Basket, { foreignKey: 'orderId' });

// üìå –ö–æ—à–∏–∫ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±–∞–≥–∞—Ç–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —á–µ—Ä–µ–∑ BasketDevice
Order.belongsToMany(Device, { through: BasketDevice });
Device.belongsToMany(Order, { through: BasketDevice });

module.exports = {
  User,
  Basket,
  BasketDevice,
  Device,
  Brand,
  Type,
  Rating,
  TypeBrand,
  DeviceInfo,
  Token,
  UserInfo,
};
